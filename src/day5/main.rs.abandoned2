use std::collections::{HashMap, HashSet};
use std::io;
use std::io::BufRead;

fn swap_until_valid(working_page: &mut Vec<i32>, before: &HashMap<i32, Vec<i32>>, after: &HashMap<i32, Vec<i32>>) -> bool {
    // Base case: all pages are valid
    println!("{before:?} {after:?}");
    if working_page.iter().enumerate().all(|(i, p)|
        is_valid_page(*p, &working_page, before.get(&p).unwrap_or(&Vec::new()), after.get(&p).unwrap_or(&Vec::new()))) {
        return true;
    }

    // Try swapping adjacent pairs
    for i in 0..working_page.len() - 1 {
        working_page.swap(i, i + 1);
        if swap_until_valid(working_page, before, after) {
            return true;
        }
        working_page.swap(i, i + 1); // Undo the swap
    }

    // No valid swap found
    false
}

fn is_valid_page(page: i32, page_order: &Vec<i32>, before: &Vec<i32>, after: &Vec<i32>) -> bool {
    let mut p = page_order.split(|x| *x == page);
    let left = p.next().unwrap_or_default().to_vec();
    let right = p.next().unwrap_or_default().to_vec();
    // given v, any element in before[v] must be after v, so not in left
    // given v, any element in after[v] must before v, so not in right
    let is_left_invalid = left.iter().any(|l| before.contains(l));
    let is_right_invalid = right.iter().any(|r| after.contains(r));
    !(is_left_invalid || is_right_invalid)
}

fn constraint_based_sort(after: &HashMap<i32, Vec<i32>>, before: &HashMap<i32, Vec<i32>>) -> Vec<i32> {
    let mut sorted_sequence: Vec<i32> = Vec::new();
    let mut remaining_elements: HashSet<i32> = before.keys()
        .chain(after.keys())
        .cloned()
        .collect();

    while !remaining_elements.is_empty() {
        let mut placed = false;

        for &element in remaining_elements.clone().iter() {
            // Get constraints or fallback to empty slice
            let before_constraints: &[i32] = before.get(&element).map(|v| &v[..]).unwrap_or(&[]);
            let after_constraints: &[i32] = after.get(&element).map(|v| &v[..]).unwrap_or(&[]);

            // Check if all constraints are satisfied
            if before_constraints.iter().all(|&e| sorted_sequence.contains(&e)) {
                sorted_sequence.push(element);
                remaining_elements.remove(&element);
                placed = true;
                break;
            } else if after_constraints.iter().all(|&e| sorted_sequence.contains(&e)) {
                sorted_sequence.insert(0, element);
                remaining_elements.remove(&element);
                placed = true;
                break;
            }
        }

        if !placed {
            // No element can be placed, cycle detected or unsolvable
            return Vec::new();
        }
    }

    sorted_sequence
}

fn main() {
    let stdin = io::stdin();
    let mut puzzle_lines = stdin.lock().lines();
    let mut middle_sum = 0;
    // let mut puzzle: Vec<i32> = Vec::new();
    let mut before: HashMap<i32, Vec<i32>> = HashMap::new();
    let mut after: HashMap<i32, Vec<i32>> = HashMap::new();
    let mut jk = 0;
    while let Some(Ok(puzzle_line)) = puzzle_lines.next() {
        let rule: Vec<i32> = puzzle_line.split('|').flat_map(|r| {
            // print!("{r} ");
            r.parse::<i32>().ok()
        }).collect();
        if rule.len() > 0 {
            before.entry(rule[0]).or_insert(Vec::new()).push(rule[1]);
            after.entry(rule[1]).or_insert(Vec::new()).push(rule[0]);
        } else {
            println!("{before:?} {after:?}");
            println!("on {jk}");
            let page_nums: Vec<i32> = puzzle_line.split(',').flat_map(|r| r.parse::<i32>().ok()).collect();
            let mut working_page: Vec<i32> = page_nums.clone();
            let og_valid: Vec<usize> = Vec::new();
            let valid: bool = page_nums.iter().enumerate()
                .all(|(index, pnum)| {
                    let mut p = page_nums.split(|x| *x == *pnum);
                    let left = p.next().unwrap_or_default().to_vec();
                    let right = p.next().unwrap_or_default().to_vec();
                    // given v, any element in before[v] must be after v, so not in left
                    // given v, any element in after[v] must before v, so not in right
                    let is_left_invalid = left.iter().any(|l| before.get(pnum).iter().any(|&b| (*b).contains(l)));
                    let is_right_invalid = right.iter().any(|r| after.get(pnum).iter().any(|&a| (*a).contains(r)));
                    if is_left_invalid { print!("!! invalid left - "); }
                    if is_right_invalid { print!("!! invalid right - "); }
                    let pair = (left, right);
                    println!("{pnum:?} against {pair:?} {is_left_invalid} {is_right_invalid}");

                    !(is_left_invalid || is_right_invalid)
                });
            if !valid {
                println!("not valid {working_page:?}");
                let dag = constraint_based_sort(&before, &after);
                let filtered:Vec<&i32> = dag.iter().filter(|x|working_page.contains(*x)).collect();
                println!("dag {dag:?} filtered {filtered:?}")
            }
            jk += 1;
            middle_sum += if valid { page_nums.get(page_nums.len() / 2).unwrap_or(&0) } else { &0 };
            println!("{valid:?}");
        }
    }

    println!("middle_sum: {}", middle_sum);
}



